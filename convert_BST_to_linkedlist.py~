import pdb
import math

class TreeNode(object):
     def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None
          
         
     def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """        
        ppath = self.binary_search(self, root, p)
        qpath = self.binary_search(self, root, q)

        m = max(len(ppath), len(qpath))
        
        for i in range(0, m):
            if (ppath[i] != qpath[i]):
                return previous 
            else:
                previous = ppath[i]

                
     def binary_search(self, root, val):
         current = root
         path = []
                  
         while (current != None ):
             path.append(current)
             if (current.val == val):
                 return current
             elif (current.val > val):
                 current = current.left
             else:
                 current = current.right
         return path

     
     
class BST(object):
    root, size = None, 0

    #build BST tree from array 
    def __init__(self, array):
        self.build_tree(array)
        self.root = None
        self.size = len(array)
        self.res = []
        
    def insert(self, node, someNumber):
        if node is None:
            tree = TreeNode(someNumber)
            return node 
        else:
            if  someNumber > node.data:
                self.insert(node.rchild, someNumber)
            else:
                self.insert(node.lchild, someNumber)

    def build_tree(self, array):         
         for e in array:
            self.insert(None, e)
            
    def pre_order(self):
        current = self.root
        #res = []
        if (current != None):
            res.append(current.val)
            pre_order(current.left)
            pre_order(current.right)

    def mid_order(self):
        current  = self.root
        if (current != None):
            mid_order(current.left)
            res.append(current.val)
            mid_order(current.right)

    def print_tree(self):
        print self.mid_order()


# convert to a double linked list
def convert(root):
    if (root.left is None and root.right is None):
        return (None, None)
    elif root.left is not None:
        (head,tail) = convert(root.left)
        tail.right = root
        return (head, tail)

    elif root.right is not None:
        (head, tail) = convert(root.right)
        head.left = root
        return (head, tail)



    
        


# connect head and tail so that it is circular 
def connect(root):
    current = root
    while (current.left is not None):
        current = current.left
    head = current
    
    current = root
    while (current.right is not None):
        current = current.right

    tail = current
    head.left = tail
    tail.right = left
    
    return head

            
if __name__ == '__main__':
    tree = BST([1,2,3,4,5,6])
    
    
